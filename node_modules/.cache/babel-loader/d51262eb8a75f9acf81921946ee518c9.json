{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main';\nimport Airdrop from './Airdrop';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }() // per collegare la dapp a metamask\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non ethereum browser detected. You should consider Metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, tetherData, tether, tetherBalance, rwdTokenData, rwd, rwdTokenBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                //const contractNetworkId =  Object.keys(Tether.networks)[0];\n                // get Tether contract info and load Tether contract \n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                }); // si lancia il metodo \"balanceof\". Dopo un metodo, bisogna mettere .call()\n\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log('tetherBalance', tetherBalance.toString());\n                _context3.next = 21;\n                break;\n\n              case 20:\n                window.alert(\"tether contract not deployed to detect network\");\n\n              case 21:\n                // per debug fa apparire in console questi valori\n                //console.log('networkId', networkId)\n                //console.log('balance', tetherBalance)\n                //LOAD RWD \n                rwdTokenData = RWD.networks[networkId];\n\n                if (!rwdTokenData) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdTokenData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 27;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 27:\n                rwdTokenBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdTokenBalance.toString()\n                });\n                console.log('rwdTokenBalance', rwdTokenBalance.toString());\n                _context3.next = 33;\n                break;\n\n              case 32:\n                window.alert(\"rwdTokenData contract not deployed to detect network\");\n\n              case 33:\n                //LOAD DecentralBank \n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 44;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 39;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 39:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log('stakingBalance', stakingBalance.toString());\n                _context3.next = 45;\n                break;\n\n              case 44:\n                window.alert(\"decentralBankData contract not deployed to detect network\");\n\n              case 45:\n                this.setState({\n                  loading: false\n                });\n\n              case 46:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // inizializzo lo stato\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: 0,\n      rwdBalance: 0,\n      stakingBalance: 0,\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col.lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Main, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 37\n        }\n      }))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/rezan/Desktop/DEVELOPER/BLOCKCHAIN/GIT/Test-BC/Test-BC/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","Airdrop","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdTokenData","rwd","rwdTokenBalance","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport Navbar from './Navbar'\nimport Web3 from 'web3'\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\nimport Main from './Main'\nimport Airdrop from './Airdrop'\n\nclass App extends Component {\n\n    async componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n      }\n\n    // per collegare la dapp a metamask\n    async loadWeb3() {\n        if(window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert('Non ethereum browser detected. You should consider Metamask!')\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        console.log(accounts)\n        this.setState({account: accounts[0]})\n        const networkId = await web3.eth.net.getId()\n        //const contractNetworkId =  Object.keys(Tether.networks)[0];\n        \n        // get Tether contract info and load Tether contract \n        const tetherData = Tether.networks[networkId]\n        if(tetherData) {\n          const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n          this.setState({tether})\n          // si lancia il metodo \"balanceof\". Dopo un metodo, bisogna mettere .call()\n          let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n          this.setState({ tetherBalance: tetherBalance.toString()})\n          console.log('tetherBalance', tetherBalance.toString())\n        } else {\n          window.alert(\"tether contract not deployed to detect network\")\n        }\n        \n        // per debug fa apparire in console questi valori\n        //console.log('networkId', networkId)\n        //console.log('balance', tetherBalance)\n\n        //LOAD RWD \n        const rwdTokenData = RWD.networks[networkId]\n        if(rwdTokenData) {\n          const rwd = new web3.eth.Contract(RWD.abi, rwdTokenData.address)\n          this.setState({rwd})\n          let rwdTokenBalance = await rwd.methods.balanceOf(this.state.account).call()\n          this.setState({ rwdBalance: rwdTokenBalance.toString()})\n          console.log('rwdTokenBalance', rwdTokenBalance.toString())\n        } else {\n          window.alert(\"rwdTokenData contract not deployed to detect network\")\n        }\n\n        //LOAD DecentralBank \n        const decentralBankData = DecentralBank.networks[networkId]\n        if(decentralBankData) {\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\n            this.setState({decentralBank})\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n            this.setState({ stakingBalance: stakingBalance.toString()})\n            console.log('stakingBalance', stakingBalance.toString())\n        } else {\n            window.alert(\"decentralBankData contract not deployed to detect network\")\n        }        \n\n        this.setState({loading: false})     \n\n    }\n\n    // inizializzo lo stato\n    constructor (props) {\n        super(props)\n        this.state = {\n            account: '0x0',\n            tether: {},\n            rwd: {},\n            decentralBank: {},\n            tetherBalance: 0,\n            rwdBalance: 0,\n            stakingBalance: 0,\n            loading: true\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar account= {this.state.account}/>\n                    <div className='container-fluid mt-5'>\n                        <div className= 'row'>\n                            <main role='main' className='col.lg-12 ml-auto mr-auto' style={{maxWidth:'600px', minHeight:'100vm'}} >\n                                <div>\n                                    <Main/>\n                                </div>\n                            </main>\n                        </div>\n                    </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}